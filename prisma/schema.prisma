// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  phone     String?  @unique
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Restaurant host specific fields
  isRestaurantHost Boolean @default(false)
  restaurantId     Int?
  restaurant       Restaurant? @relation("UserRestaurant", fields: [restaurantId], references: [id])
  
  // Profile fields for restaurant hosts
  profileImage     String?
  bio             String?
  address         String?
  city            String?
  state           String?
  country         String?
  zipCode         String?
  
  // Relations
  hostedRestaurant Restaurant? @relation("RestaurantHost")
  listings        Listing[]
  bookings        Booking[]    // As a guest
  reviews         Review[]     // Reviews given by user
  notifications   Notification[]
  earnings        Earning[]
  paymentMethods  PaymentMethod[]
  hostSettings    HostSettings?
  messagesSent    Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String
  city        String
  state       String
  country     String
  zipCode     String
  phone       String?
  email       String?
  website     String?
  cuisine     String?
  priceRange  String?  // e.g., "$", "$$", "$$$", "$$$$"
  rating      Float?   @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  host        User     @relation("RestaurantHost", fields: [hostId], references: [id])
  hostId      Int      @unique
  users       User[]   @relation("UserRestaurant")
  listings    Listing[]
  
  // Restaurant images
  images      RestaurantImage[]
  
  // Operating hours
  operatingHours OperatingHours[]
}

model Listing {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String   // "space", "room", "venue", etc.
  capacity    Int?
  pricePerHour Float?
  pricePerDay  Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  restaurantId Int? // Make this optional
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  host        User     @relation(fields: [hostId], references: [id])
  hostId      Int
  bookings    Booking[]
  images      ListingImage[]
  amenities   ListingAmenity[]
  availability Availability[]
  reviews     Review[]
}

model ListingImage {
  id        Int      @id @default(autoincrement())
  url       String
  caption   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
}

model Amenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  icon        String?
  category    String?  // "basic", "kitchen", "tech", etc.
  createdAt   DateTime @default(now())
  
  // Relations
  listings    ListingAmenity[]
}

model ListingAmenity {
  id        Int      @id @default(autoincrement())
  
  // Relations
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
  amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId Int
  
  @@unique([listingId, amenityId])
}

model Availability {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startTime String   // Format: "HH:MM"
  endTime   String   // Format: "HH:MM"
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
  
  // Relations
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
  
  @@unique([listingId, date, startTime, endTime])
}

model Booking {
  id          Int      @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime
  totalPrice  Float
  status      String   @default("pending") // "pending", "confirmed", "rejected", "cancelled", "completed"
  guestCount  Int?
  specialRequests String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  listing    Listing  @relation(fields: [listingId], references: [id])
  listingId  Int
  guest      User     @relation(fields: [guestId], references: [id])
  guestId    Int
  review     Review?
  earning    Earning?
  conversation Conversation?
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  
  // Relations
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @unique
}

model Earning {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        String   // "booking", "payout", "refund"
  status      String   @default("pending") // "pending", "paid", "cancelled"
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  host        User     @relation(fields: [hostId], references: [id])
  hostId      Int
  booking     Booking? @relation(fields: [bookingId], references: [id])
  bookingId   Int?     @unique
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String   // "booking", "review", "payout", "system"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model RestaurantImage {
  id           Int        @id @default(autoincrement())
  url          String
  caption      String?
  isPrimary    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  
  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
}

model OperatingHours {
  id          Int        @id @default(autoincrement())
  dayOfWeek   Int        // 0 = Sunday, 1 = Monday, etc.
  openTime    String     // Format: "HH:MM"
  closeTime   String     // Format: "HH:MM"
  isClosed    Boolean    @default(false)
  
  // Relations
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  
  @@unique([restaurantId, dayOfWeek])
}

model HostSettings {
  id                Int     @id @default(autoincrement())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int     @unique
  // Notification preferences
  emailBookings     Boolean @default(true)
  emailMessages     Boolean @default(true)
  emailPayouts      Boolean @default(true)
  pushBookings      Boolean @default(true)
  pushMessages      Boolean @default(false)
  pushPayouts       Boolean @default(true)
  // Business info
  companyName       String?
  kraPin            String?
  // Security
  twoFactorEnabled  Boolean @default(false)
}

model PaymentMethod {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  type        String // 'bank' or 'mpesa'
  details     String // JSON string for storing masked account/phone, etc.
  isPrimary   Boolean @default(false)
  createdAt   DateTime @default(now())
}

model Conversation {
  id          Int       @id @default(autoincrement())
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   Int       @unique
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  sender         User         @relation("MessagesSent", fields: [senderId], references: [id])
  senderId       Int
  receiver       User         @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId     Int
  content        String
  read           Boolean      @default(false)
  timestamp      DateTime     @default(now())
}
