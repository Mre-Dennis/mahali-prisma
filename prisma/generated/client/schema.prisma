generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  phone            String?         @unique
  password         String
  name             String
  role             String          @default("user")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  profileImage     String?
  bio              String?
  address          String?
  city             String?
  state            String?
  country          String?
  zipCode          String?
  isRestaurantHost Boolean         @default(false)
  restaurantId     Int?
  bookings         Booking[]
  earnings         Earning[]
  hostSettings     HostSettings?
  listings         Listing[]
  messagesReceived Message[]       @relation("MessagesReceived")
  messagesSent     Message[]       @relation("MessagesSent")
  notifications    Notification[]
  paymentMethods   PaymentMethod[]
  hostedRestaurant Restaurant?     @relation("RestaurantHost")
  reviews          Review[]
  restaurant       Restaurant?     @relation("UserRestaurant", fields: [restaurantId], references: [id])
}

model Restaurant {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?
  address        String
  city           String
  state          String
  country        String
  zipCode        String
  phone          String?
  email          String?
  website        String?
  restaurantType String?
  priceRange     String?
  rating         Float?            @default(0)
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  hostId         Int               @unique
  listings       Listing[]
  operatingHours OperatingHours[]
  host           User              @relation("RestaurantHost", fields: [hostId], references: [id])
  images         RestaurantImage[]
  users          User[]            @relation("UserRestaurant")
}

model Listing {
  id           Int              @id @default(autoincrement())
  title        String
  description  String?
  type         String
  capacity     Int?
  pricePerHour Float?
  pricePerDay  Float?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  hostId       Int
  restaurantId Int?
  availability Availability[]
  bookings     Booking[]
  host         User             @relation(fields: [hostId], references: [id])
  restaurant   Restaurant?      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  amenities    ListingAmenity[]
  images       ListingImage[]
  reviews      Review[]
}

model ListingImage {
  id        Int      @id @default(autoincrement())
  url       String
  caption   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  listingId Int
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Amenity {
  id        Int              @id @default(autoincrement())
  name      String
  icon      String?
  category  String?
  createdAt DateTime         @default(now())
  listings  ListingAmenity[]
}

model ListingAmenity {
  id        Int     @id @default(autoincrement())
  listingId Int
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, amenityId])
}

model Availability {
  id          Int      @id @default(autoincrement())
  date        DateTime
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  listingId   Int
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Booking {
  id              Int      @id @default(autoincrement())
  startTime       DateTime
  endTime         DateTime
  totalPrice      Float?
  status          String   @default("pending")
  guestCount      Int?
  specialRequests String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  listingId       Int
  guestId         Int
  guest           User     @relation(fields: [guestId], references: [id])
  listing         Listing  @relation(fields: [listingId], references: [id])
  earning         Earning?
  review          Review?
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  listingId Int
  authorId  Int
  bookingId Int      @unique
  author    User     @relation(fields: [authorId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Earning {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        String
  status      String   @default("pending")
  description String?
  createdAt   DateTime @default(now())
  hostId      Int
  bookingId   Int?     @unique
  booking     Booking? @relation(fields: [bookingId], references: [id])
  host        User     @relation(fields: [hostId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model RestaurantImage {
  id           Int        @id @default(autoincrement())
  url          String
  caption      String?
  isPrimary    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model OperatingHours {
  id           Int         @id @default(autoincrement())
  dayOfWeek    Int
  openTime     String
  closeTime    String
  isClosed     Boolean     @default(false)
  restaurantId Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, dayOfWeek])
}

model HostSettings {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  emailBookings Boolean  @default(true)
  emailMessages Boolean  @default(true)
  emailPayouts  Boolean  @default(true)
  pushBookings  Boolean  @default(true)
  pushMessages  Boolean  @default(true)
  pushPayouts   Boolean  @default(true)
  companyName   String?
  kraPin        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  details   String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  bookingId Int       @unique
  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  receiverId     Int
  content        String
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiver       User         @relation("MessagesReceived", fields: [receiverId], references: [id])
  sender         User         @relation("MessagesSent", fields: [senderId], references: [id])
}
